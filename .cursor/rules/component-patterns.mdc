---
description: 
globs: 
alwaysApply: false
---
# Component Patterns & Conventions

## Component Structure

### File Organization
- Components are organized by feature/domain in `src/components/`
- Each component has its own file with `.tsx` extension
- Use PascalCase for component names and files
- Group related components in subdirectories

### Component Template
```tsx
import React from "react";
import { cn } from "../../lib/utils";
import type { ComponentProps } from "./types";

interface ComponentNameProps {
  // Define props interface
}

export function ComponentName({ prop1, prop2, className, ...props }: ComponentNameProps) {
  return (
    <div className={cn("base-styles", className)} {...props}>
      {/* Component content */}
    </div>
  );
}
```

## UI Component Patterns

### Base Components
Reference the base UI components in [src/components/ui/](mdc:src/components/ui) for:
- [Button.tsx](mdc:src/components/ui/Button.tsx) - All button variants
- [Card.tsx](mdc:src/components/ui/Card.tsx) - Card containers with header/content
- [Input.tsx](mdc:src/components/ui/Input.tsx) - Form input fields

### Layout Components
- [Layout.tsx](mdc:src/components/layout/Layout.tsx) - Main app layout wrapper
- [Header.tsx](mdc:src/components/layout/Header.tsx) - Top navigation bar
- [Sidebar.tsx](mdc:src/components/layout/Sidebar.tsx) - Left navigation sidebar

### Component Composition
- Use composition over inheritance
- Accept `className` prop for styling customization
- Use `cn()` utility for conditional class merging
- Spread remaining props to root element

### Styling Conventions
- Use Tailwind CSS utility classes
- Follow the design system color palette
- Use consistent spacing (8px grid system)
- Implement responsive design patterns
- Use semantic class names when possible

## Page Component Patterns

### Page Structure
```tsx
import React, { useState, useEffect } from "react";
import { useAuth } from "../contexts/AuthContext";
import { ingredientService } from "../lib/database";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/Card";
import type { Ingredient } from "../types";

export function PageName() {
  const { user } = useAuth();
  const [data, setData] = useState<Ingredient[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      loadData();
    }
  }, [user]);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ingredientService.getAll(user.id);
      setData(result);
    } catch (error) {
      console.error("Error loading data:", error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-secondary-900">Page Title</h1>
        <p className="text-secondary-600">Page description</p>
      </div>
      
      {/* Page content */}
    </div>
  );
}
```

### Loading States
- Always implement loading states for async operations
- Use consistent loading spinner component
- Show skeleton loaders for better UX
- Handle error states gracefully

### Error Handling
- Use try-catch blocks for async operations
- Display user-friendly error messages
- Log errors to console for debugging
- Provide retry mechanisms where appropriate

## Form Component Patterns

### Form Structure
```tsx
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "../components/ui/Button";
import { Input } from "../components/ui/Input";

const formSchema = z.object({
  name: z.string().min(1, "Name is required"),
  quantity: z.number().min(0, "Quantity must be positive"),
});

type FormData = z.infer<typeof formSchema>;

export function FormComponent() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = async (data: FormData) => {
    try {
      // Handle form submission
      reset();
    } catch (error) {
      console.error("Form submission error:", error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Input
          {...register("name")}
          placeholder="Enter name"
          error={errors.name?.message}
        />
      </div>
      
      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? "Saving..." : "Save"}
      </Button>
    </form>
  );
}
```

### Form Validation
- Use Zod schemas for validation
- Integrate with React Hook Form
- Display validation errors inline
- Use proper input types and constraints

## Data Fetching Patterns

### Service Layer
- All database operations go through service functions in [database.ts](mdc:src/lib/database.ts)
- Use consistent error handling patterns
- Implement proper TypeScript types
- Handle loading and error states

### Hook Patterns
```tsx
function useIngredients(userId: string) {
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadIngredients();
  }, [userId]);

  const loadIngredients = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await ingredientService.getAll(userId);
      setIngredients(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load ingredients");
    } finally {
      setLoading(false);
    }
  };

  return { ingredients, loading, error, refetch: loadIngredients };
}
```

## Accessibility Guidelines

### Semantic HTML
- Use proper HTML elements (button, input, form, etc.)
- Implement proper ARIA labels and roles
- Ensure keyboard navigation works
- Use semantic headings hierarchy

### Color and Contrast
- Follow WCAG contrast guidelines
- Don't rely solely on color for information
- Provide alternative text for images
- Test with screen readers

## Performance Considerations

### Optimization Techniques
- Use React.memo for expensive components
- Implement proper dependency arrays in useEffect
- Use useCallback for event handlers
- Lazy load components when appropriate
- Optimize re-renders with proper state management

### Bundle Optimization
- Import only necessary components
- Use dynamic imports for code splitting
- Optimize images and assets
- Minimize bundle size with tree shaking
